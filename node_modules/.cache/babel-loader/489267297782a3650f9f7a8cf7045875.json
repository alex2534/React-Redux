{"ast":null,"code":"/** @format */\nimport { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; //needs an object as an argument\n\ncreateSlice({\n  name: \"counter\",\n  initialState,\n  //reducers also receive an object or you could say a map\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    toggleCounter(state) {}\n\n  }\n}); //this is the function a pass as a parameter to the createStore\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //an action return an object of any type\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  } //an action return an object of any type\n\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  } //an action return an object of any type\n\n\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  } //an action return an object of any type\n\n\n  if (action.type === \"toggle\") {\n    return {\n      //this will inverte the state if true to false and if false to true\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n\n  return state;\n}; //the create store receives a function as a parameter\n//this creates our react store\n\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["/Users/alexnascimento/Desktop/redux-starting-project/src/store/index.js"],"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB,C,CAEA;;AACAH,WAAW,CAAC;AACXI,EAAAA,IAAI,EAAE,SADK;AAEXH,EAAAA,YAFW;AAGX;AACAI,EAAAA,QAAQ,EAAE;AACTC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACL,OAAN;AACA,KAHQ;;AAITM,IAAAA,SAAS,CAACD,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACL,OAAN;AACA,KANQ;;AAOTO,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACvBH,MAAAA,KAAK,CAACL,OAAN,GAAgBK,KAAK,CAACL,OAAN,GAAgBQ,MAAM,CAACC,MAAvC;AACA,KATQ;;AAUTC,IAAAA,aAAa,CAACL,KAAD,EAAQ,CAAE;;AAVd;AAJC,CAAD,CAAX,C,CAkBA;;AACA,MAAMM,cAAc,GAAG,YAAkC;AAAA,MAAjCN,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXS,MAAW;;AACxD;AACA,MAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAChC,WAAO;AACNZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADnB;AAENC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFb,KAAP;AAIA,GAPuD,CASxD;;;AACA,MAAIO,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAC/B,WAAO;AACNZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgBQ,MAAM,CAACC,MAD1B;AAENR,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFb,KAAP;AAIA,GAfuD,CAgBxD;;;AACA,MAAIO,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAChC,WAAO;AACNZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADnB;AAENC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFb,KAAP;AAIA,GAtBuD,CAwBxD;;;AACA,MAAIO,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA8B;AAC7B,WAAO;AACN;AACAX,MAAAA,WAAW,EAAE,CAACI,KAAK,CAACJ,WAFd;AAGND,MAAAA,OAAO,EAAEK,KAAK,CAACL;AAHT,KAAP;AAKA;;AAED,SAAOK,KAAP;AACA,CAlCD,C,CAoCA;AACA;;;AACA,MAAMQ,KAAK,GAAGhB,WAAW,CAACc,cAAD,CAAzB;AAEA,eAAeE,KAAf","sourcesContent":["/** @format */\n\nimport { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showCounter: true };\n\n//needs an object as an argument\ncreateSlice({\n\tname: \"counter\",\n\tinitialState,\n\t//reducers also receive an object or you could say a map\n\treducers: {\n\t\tincrement(state) {\n\t\t\tstate.counter++;\n\t\t},\n\t\tdecrement(state) {\n\t\t\tstate.counter--;\n\t\t},\n\t\tincrease(state, action) {\n\t\t\tstate.counter = state.counter + action.amount;\n\t\t},\n\t\ttoggleCounter(state) {},\n\t},\n});\n\n//this is the function a pass as a parameter to the createStore\nconst counterReducer = (state = initialState, action) => {\n\t//an action return an object of any type\n\tif (action.type === \"increment\") {\n\t\treturn {\n\t\t\tcounter: state.counter + 1,\n\t\t\tshowCounter: state.showCounter,\n\t\t};\n\t}\n\n\t//an action return an object of any type\n\tif (action.type === \"increase\") {\n\t\treturn {\n\t\t\tcounter: state.counter + action.amount,\n\t\t\tshowCounter: state.showCounter,\n\t\t};\n\t}\n\t//an action return an object of any type\n\tif (action.type === \"decrement\") {\n\t\treturn {\n\t\t\tcounter: state.counter - 1,\n\t\t\tshowCounter: state.showCounter,\n\t\t};\n\t}\n\n\t//an action return an object of any type\n\tif (action.type === \"toggle\") {\n\t\treturn {\n\t\t\t//this will inverte the state if true to false and if false to true\n\t\t\tshowCounter: !state.showCounter,\n\t\t\tcounter: state.counter,\n\t\t};\n\t}\n\n\treturn state;\n};\n\n//the create store receives a function as a parameter\n//this creates our react store\nconst store = createStore(counterReducer);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}